Aroundadvice
 Application.java
 package com.example;
 import com.example.service.YourService;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.ConfigurableApplicationContext;
 @SpringBootApplication
 public class YourApplication {
 public static void main(String[] args) {
 		ConfigurableApplicationContext context =	SpringApplication.run(YourApplication.class, args);
 		YourService yourService = context.getBean(YourService.class);
 yourService.yourmethod();
 }
 }
 Aspect.java:
 package com.example.aspect;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.annotation.Around;
 import org.aspectj.lang.annotation.Aspect;
 import org.springframework.stereotype.Component;
 @Aspect
 @Component
 public class MyAspect {
 	@Around(“execution(* com.example.service.serv1.service2())”)
 public void aspect(ProceedingJoinPoint joinPoint) {
 		try {
 			System.out.println(“Before Advice”);
 joinPoint.proceed(); // Proceed with the original method
 System.out.println(“After Advice”);
 } catch (Throwable e) {
 			System.err.println(“Exception in advice: “ + e.getMessage());
 		}
 }
 } 
Service.java
package com.example.service; 
import org.springframework.stereotype.Service; 
@Service 
public class serv1 {
 public void service2() { 
System.out.println(“my method”);
 } 
}
